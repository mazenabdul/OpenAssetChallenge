{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mazen\\\\Desktop\\\\WebDev\\\\Axomic\\\\src\\\\components\\\\Post.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from 'react-apollo';\nimport PostItem from './PostItem';\nimport PageContext from '../context/PageContext';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TablePaginationActions(props) {\n  _s();\n\n  const {\n    count,\n    page,\n    rowsPerPage,\n    onChangePage\n  } = props;\n  const theme = useTheme();\n\n  const handleFirstPageButtonClick = event => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = event => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = event => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = event => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: handleBackButtonClick,\n      disabled: page === 0,\n      \"aria-label\": \"previous page\",\n      children: theme.direction === 'rtl' ? /*#__PURE__*/_jsxDEV(KeyboardArrowRight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(KeyboardArrowLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 63\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: handleNextButtonClick,\n      disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n      \"aria-label\": \"next page\",\n      children: theme.direction === 'rtl' ? /*#__PURE__*/_jsxDEV(KeyboardArrowLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(KeyboardArrowRight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 62\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TablePaginationActions, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n\n_c = TablePaginationActions;\n\nconst Post = () => {\n  _s2();\n\n  const {\n    state\n  } = useContext(PageContext);\n  const [page, setPage] = React.useState(0);\n  const [postsPerPage, setPostsPerPage] = React.useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setPostsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }; //Query for a single post\n\n\n  const SINGLE_POST = gql`\n\nquery {\n  posts(pagination: { limit:${state.postCount} }){\n    data{\n      title\n      author{\n        name\n      }\n      comments{\n        body\n      }\n    }\n  }\n} \n`;\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(SINGLE_POST);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: (postsPerPage > 0 ? data.posts.data.slice(page * postsPerPage, page * postsPerPage + postsPerPage) : null).map(post => /*#__PURE__*/_jsxDEV(PostItem, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [5, 10, 25, {\n        label: 'All',\n        value: -1\n      }],\n      colSpan: 3,\n      count: data.posts.data.length,\n      rowsPerPage: postsPerPage,\n      page: page,\n      SelectProps: {\n        inputProps: {\n          'aria-label': 'rows per page'\n        },\n        native: true\n      },\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage,\n      ActionsComponent: TablePaginationActions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(Post, \"4BUk6To4qXVBBRwJnkaYmyUJ4Lw=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Post;\nexport default Post;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TablePaginationActions\");\n$RefreshReg$(_c2, \"Post\");","map":{"version":3,"sources":["C:/Users/mazen/Desktop/WebDev/Axomic/src/components/Post.js"],"names":["React","useContext","useEffect","gql","useQuery","PostItem","PageContext","makeStyles","useTheme","TablePagination","IconButton","FirstPageIcon","KeyboardArrowLeft","KeyboardArrowRight","LastPageIcon","TablePaginationActions","props","count","page","rowsPerPage","onChangePage","theme","handleFirstPageButtonClick","event","handleBackButtonClick","handleNextButtonClick","handleLastPageButtonClick","Math","max","ceil","direction","Post","state","setPage","useState","postsPerPage","setPostsPerPage","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","target","value","SINGLE_POST","postCount","loading","data","error","posts","slice","map","post","label","length","inputProps","native"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from 'react-apollo'\r\nimport PostItem from './PostItem'\r\nimport PageContext from '../context/PageContext'\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nfunction TablePaginationActions(props) {\r\n\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n  const theme = useTheme();\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n  return (\r\n    <div>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\nconst Post = () => {\r\n \r\n  const { state } = useContext(PageContext)\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [postsPerPage, setPostsPerPage] = React.useState(5);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPostsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  //Query for a single post\r\nconst SINGLE_POST = gql `\r\n\r\nquery {\r\n  posts(pagination: { limit:${state.postCount} }){\r\n    data{\r\n      title\r\n      author{\r\n        name\r\n      }\r\n      comments{\r\n        body\r\n      }\r\n    }\r\n  }\r\n} \r\n` \r\n  const { loading, data, error } = useQuery(SINGLE_POST)\r\n\r\n    return (  \r\n      <React.Fragment>\r\n      <div>\r\n        {(postsPerPage > 0\r\n          ? data.posts.data.slice(page * postsPerPage, page * postsPerPage + postsPerPage)\r\n          : null\r\n        ).map((post) => (\r\n          \r\n          \r\n          <PostItem post={post}/>\r\n        \r\n        ))}\r\n\r\n      </div>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n            colSpan={3}\r\n            count={data.posts.data.length}\r\n            rowsPerPage={postsPerPage}\r\n            page={page}\r\n            SelectProps={{\r\n              inputProps: { 'aria-label': 'rows per page' },\r\n              native: true,\r\n            }}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            ActionsComponent={TablePaginationActions}\r\n          />\r\n    </React.Fragment>\r\n        \r\n       \r\n      \r\n   \r\n  )\r\n}\r\n\r\nexport default Post\r\n"]},"metadata":{},"sourceType":"module"}